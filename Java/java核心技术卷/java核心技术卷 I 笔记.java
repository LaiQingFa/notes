/**
多态性是指允许不同类的对象对同一消息作出响应。
多态性包括参数化多态性和包含多态性。
多态性语言具有灵活、抽象、行为共享、代码共享的优势，很好的解决了应用程序函数同名问题。


多态有两种表现形式：重载和覆盖
首先说重载（overload），是发生在同一类中。与什么父类子类、继承毫无关系。    
  标识一个函数除了函数名外，还有函数的参数（个数和类型）。也就是说，一个类中可以有两个或更多的函数，叫同一个名字而他们的参数不同。    
  他们之间毫无关系，是不同的函数，只是可能他们的功能类似，所以才命名一样，增加可读性，仅此而已！  
  
  覆盖(override),是发生在子类中！也就是说必须有继承的情况下才有覆盖发生。
  
  我们知道继承一个类，也就有了父类了全部方法，如果你感到哪个方法不爽，功能要变，那就把那个函数在子类中重新实现一遍。  
  这样再调用这个方法的时候，就是执行子类中的过程了。父类中的函数就被覆盖了。
  
  多态是父类调子类的实现，继承是子类调父类的实现，由于多态时不知道会被哪个子类继承，所以定义的东西都是虚函数，
  当你执行这个虚函数时，首先找到该虚函数代表的实体子类，并执行子类中的相关代码
  
  多态也是java的一个很重要的部分，就是一个方法名可以用多次，具体根据参数的不同来分辨你调用哪个方法
  
  
  ArrayList 是一个采用类型参数的泛型类
  
  
  
  
  
  
  
  
  
  
*/